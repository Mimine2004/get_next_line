# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    get_next_line.text                                 :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: hhecquet <hhecquet@student.42perpignan.    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/11/19 09:30:36 by hhecquet          #+#    #+#              #
#    Updated: 2024/11/19 10:21:13 by hhecquet         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "get_next_line.h"

void	*ft_calloc(size_t nmemb, size_t size)
{
	size_t	tot;
	void	*ran;

	tot = size * nmemb;
	ran = malloc(tot);
	if (!ran)
		return (NULL);
	unsigned char	*str;
	str = ran;
	while (tot != 0)
	{
		*str = 0;
		str++;
		tot--;
	}
	return (ran);
}

char *get_next_line(int fd)
{
  int  bytes_read;
  char *cup_buffer;
  
  cup_buffer = ft_calloc (3 + 1, sizeof(char));
  if (cup_buffer == NULL)
    return (NULL);
  bytes_read = read(fd, cup_buffer, 3);
  if (bytes_read <= 0)
    return (NULL);
  return (cup_buffer);
}

#include <stdio.h>
#include <fcntl.h>
int main(void)
{
  int    fd;
  char  *next_line;
  
  fd = open("get_next_line.c", O_RDONLY);
  while (1)
  {
  	next_line = get_next_line(fd);
  	printf("%s", next_line);
  	next_line = NULL;
  }
  close(fd);
  return (0);
}
/* char *line;
	char *buffer;
	int ret;

	line = NULL;
	buffer = malloc(sizeof(char) * (BUFFER_SIZE + 1));
	if (!buffer)
		return (NULL);
	ret = read(fd, buffer, BUFFER_SIZE);
	while (ret > 0)
	{
		buffer[ret] = '\0';
		line = ft_strjoin(line, buffer);
		if (!line)
			return (NULL);
		if (ft_strchr(buffer, '\n'))
			break;
		ret = read(fd, buffer, BUFFER_SIZE);
	}
	free(buffer);
	return (line);  */